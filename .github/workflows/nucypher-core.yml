name: nucypher-core

on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - v*

defaults:
  run:
    working-directory: nucypher-core

env:
  CARGO_INCREMENTAL: 0
  RUSTFLAGS: "-Dwarnings"

jobs:

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            rust: 1.67 # MSRV
          - target: x86_64-unknown-linux-gnu
            rust: stable

    steps:
      - uses: actions/checkout@v1
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
      - run: ${{ matrix.deps }}
      - run: cargo check --all-features
      - run: cargo test --release --all-features

  wasm-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - 1.67 # MSRV
          - stable
        target:
          - wasm32-unknown-unknown

    steps:
      - uses: actions/checkout@v1
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
      - run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - run: cd ../nucypher-core-wasm && wasm-pack test --node

  yarn-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]
        rust:
          - stable
        target:
          - wasm32-unknown-unknown
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install Yarn
        run: npm install -g yarn
      - run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - run: make
        working-directory: nucypher-core-wasm
      - run: yarn install
        working-directory: nucypher-core-wasm/examples/node
      - run: yarn build
        working-directory: nucypher-core-wasm/examples/node
      - run: yarn test
        working-directory: nucypher-core-wasm/examples/node

  rebundle-wasm:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
        target:
          - wasm32-unknown-unknown

    steps:
      - uses: actions/checkout@v1
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ matrix.target }}
      - run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      - uses: bahmutov/npm-install@v1
        with:
          working-directory: nucypher-core-wasm-bundler
          node-version: '16.x'
      - run: npm run build
        working-directory: nucypher-core-wasm-bundler

  python-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
        python:
          - "3.12"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}

      - name: Install nucypher-core Python package
        run: pip install -e .
        working-directory: nucypher-core-python

      - name: Install pip dependencies
        run: pip install mypy ruff

      - name: Run mypy.stubtest
        run: python -m mypy.stubtest nucypher_core --allowlist stubtest-allowlist.txt
        working-directory: nucypher-core-python

      - name: Run ruff
        run: ruff check nucypher_core
        working-directory: nucypher-core-python

  trigger-wheels:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Wheels
          token: ${{ secrets.PERSONAL_TOKEN }}

  codecov:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable
          targets: x86_64-unknown-linux-gnu
      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      # Only checking the coverage of the main library,
      # bindings are covered by their language's tests.
      - name: Generate code coverage
        run: cargo llvm-cov --workspace --lcov --output-path lcov.info --all-features
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: true
